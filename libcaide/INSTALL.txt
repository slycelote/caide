Building instructions for caide command line utility
----------------------------------------------------


This document describes how to build caide from source code and run tests.
If you're looking for a user manual, see README.md instead.


Obtaining source code
---------------------

    > git clone https://codeberg.org/slycelote/caide
    > cd caide/libcaide
    > git submodule update --init --recursive


General build requirements
--------------------------

CMake, make, g++, Python and cabal+ghc (installed with ghcup:
https://www.haskell.org/ghcup/install/) are required to build.
Tested with cabal version 3.16 and ghc version 9.12; use "ghcup tui" to
install latest versions and set them to default.

In addition, curl, diff, PhantomJS, and a C# compiler are required to run tests.


Linux build
-----------

All dependencies are likely to be present in your distribution's repositories.
For example, in Debian:

    > sudo apt-get install cmake g++ python

Once the dependencies are installed, run the following commands from libcaide
directory:

    > cabal update
    > cabal build

The resulting executable is in $(cabal --list-bin caide).

Install test dependencies and run tests:

    > sudo apt-get install curl diffutils mono-gmcs phantomjs
    > MONO=mono tests/run-tests.sh


Windows build
-------------

Make sure GHCUP_MSYS2 environment variable points to msys directory (by default,
C:\ghcup\msys64).

Setup build environment. You need to do this every time you open a new console
window.

    > setup-env.bat

When building with support for C++ inliner (the default), install make, cmake
and Python. It can be done in two ways:
  1. Install each utility individually and make sure they are in your PATH
  (either by changing the system environment variable or by modifying
  setup-env.bat accordingly.)
  2. Install the utilities only inside MSYS environment:

    > %GHCUP_MSYS2%\msys2_shell.cmd -here -mingw64 -no-start -use-full-path -defterm -c "pacman -S mingw-w64-x86_64-make mingw-w64-x86_64-cmake python"

Once all dependencies are installed, you are ready to build with:

    > cabal update
    > cabal build

To run tests:

    > run-tests.bat
